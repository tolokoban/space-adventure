/**
 * @module app
 *
 * This is the  starting module. It is responsible  in registering the
 * Service Worker and in starting the animation loop.
 */
"use strict";

// Starting the service worker for offline experience.
require("offline");

var WebGL = require("tfw.webgl");   // WebGl useful functions.
var Alert = require("alert");       // Displaying text over the canvas.
var Play = require("play");         // Managing the animation frames.
// Used to get  the current version. This module is  not mandatory. It
// is auto-generated by ToloFrameWork.
var Cfg = require("$").config;      

// The canvas takes the while screen.
var canvas = document.getElementById( "canvas" );
// Allow to start and stop animation. But for this demo, we just start
// it once and let it loop for ever.
var renderer = new WebGL.Renderer( canvas );
// Promise of assets loading.
var playReady = Play.init( renderer.gl, canvas );

// When all assests have been loaded...
playReady.then(function() {
    // Reset the game.
    Play.reset();
    // Start the rendering loop with the function in argument.
    renderer.start(function( time ) {
        // If the graphic card is  not powerful enough, you can render
        // in low resolution.  That means that every  logical pixel is
        // made of  2x2 real css-pixels.  It saves the  computation of
        // 75% of the frame at normal resolution.
        // 
        var res = window.innerHeight > 800 ? 1 : 0;
        // Managing resize considering resolution.
        var W = window.innerWidth >> res;
        var H = window.innerHeight >> res;
        canvas.setAttribute( 'width', W );
        canvas.setAttribute( 'height', H );
        // Tell WebGL what is the site of the viewport.
        renderer.gl.viewport( 0, 0, W, H );
        // Drawing the scene.
        Play.draw( time );
    });
});

// Display the welcome text.
Alert(
    "Quick slides up and down to move your spaceship.<br/>Or use the keyboard's arrow keys."
        + "<p>" + Cfg.version + "</p>",
    // Call `Play.start()` as soon as the message has vanished (after a user touch).
    Play.start.bind( Play )
);
